"Total ways to climb the steps using at max 1 step / 2 steps at a time. "


"""
problem : Total unique ways to climb the stairs taking at-max 2 steps at a time.
objective function  :  count_total_ways(step_to_climb) 
                        calculate the Total unique ways to climb the stairs taking at-max 2 steps at a time.

state of the problem : step_to_climb

recurrance :    step_to_climb                                                                               if 0 <= step_to_climb <= 1;
                count_total_ways(step_to_climb - 1) + count_total_ways(step_to_climb - 2)                           step_to_climb >= 2;

"""                                                                                                                                                                             


#########################################################################USING DP####################################################################

def count_total_ways_DP(step_to_climb):
    " using DP  ,we store each possible state of the problem so that we dont do repeatative work to find the total unique ways to climp steps  "
    " f(n) = f(n-1) + n : n >= 1 , DP(0) = 1  "
    DP = [0] * (step_to_climb + 1);
    DP[1] = 1;
    for state in range (2 , step_to_climb + 1 , 1 ):
        DP[state] = DP[state - 1] + DP[state - 2];
    return DP[step_to_climb];

#########################################################################USING DP####################################################################


#########################################################################RECURSION###################################################################
def count_total_ways(step_to_climb):
    " using recursion ,find the total unique ways to climp steps  "
    " f(n) = f(n-1) + n : n >= 1 , DP(0) = 1  "
    if (step_to_climb < 0 ):
        return 0;

    if (step_to_climb <= 1):
        return step_to_climb;

    else : 
            total_ways = count_total_ways(step_to_climb - 1) + count_total_ways(step_to_climb - 2);
            return total_ways;



#########################################################################RECURSION###############################################
step_to_climb = int(input("enter the total no of steps : "));
# total_ways  = count_total_ways(step_to_climb);
total_ways  = count_total_ways_DP(step_to_climb);
print("the total unique ways to climb : " + str(step_to_climb) + " stairs is : " + str(total_ways) , end = " "  );

#########################################################################################################################################################

"Total ways to climb the steps using at max 1 step / 2 steps at a time. "

"""
objective function = Count_validjumps(n) 
                     when we are at step n , what all possible jumps we can make from n

state of the problem : position from where we can jump  , 0 <= position <= n-1 
recurrance :    position == n , valid_jump = 0 ;
                Count_validjumps(n+1) + Count_validjumps(n+2);    position >= 0;

                                     F(0) 
                 f(1)                                 f(2)
          f(2)            f(3)                   f(3)       f(4)
     f(3)      f(4)   f(4)    f(5)          f(4)     f(5)
 f(4)   f(5)           

""" 


def valid_ways(current_position ,destination):
    "this objective function will calculate the valid ways to reach the destination from the current position"
    if (current_position ==  destination):
        return 1 ;
    if (current_position > destination):
        return 0 ;
    else:
        Total_valid_ways = valid_ways(current_position + 1 , destination ) + valid_ways(current_position + 2 , destination);
        return Total_valid_ways;


def valid_ways_DP(destination):
    "this objective function will calculate the valid ways to reach the destination from the current position"

    DP = [0] * (destination + 1 );
    DP[destination] = 1;
    DP[destination - 1] = 1;

    for state in range((destination - 2) , -1 ,-1 ):
        DP[state] = DP[state + 1] + DP[state + 2];
    return DP[0];

step_to_climb = int(input("enter the destination , how many steps are present : "));
total_ways  = valid_ways_DP(step_to_climb);
print("the total unique ways to climb : " + str(step_to_climb) + " stairs is : " + str(total_ways) , end = " "  );











